unit Clientes;

interface

uses
  Windows, Messages, SysUtils, FileCtrl,
  Variants, Classes, Graphics, Controls,
  Forms, Dialogs, StdCtrls, DBCtrls,
  Mask, ExtCtrls, ComCtrls, Buttons,
  DB,
  PngBitBtn, PngSpeedButton, WideStrings,
  SqlExpr,
  DBGridEhGrouping, ToolCtrlsEh, GridsEh, DBGridEh, DBCtrlsEh, DBLookupEh, DynVarsEh, DBAxisGridsEh, DBGridEhToolCtrls,
  FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf,
  FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys,
  FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, FireDAC.Phys.MySQL, FireDAC.Phys.MySQLDef,
  FireDAC.VCLUI.Wait,
  System.JSON,
  System.JSON.BSON,
  System.JSON.Writers,
  System.JSON.Builders;

type
  TfClientes = class(TForm)
    oDBNav: TDBNavigator;
    PageControl1: TPageControl;
    TabSheet1: TTabSheet;
    oDS_Clientes: TDataSource;
    StatusBar1: TStatusBar;
    oActivo: TDBCheckBox;
    Label5: TLabel;
    Label3: TLabel;
    oNombreCom: TDBEdit;
    Label4: TLabel;
    TabSheet2: TTabSheet;
    oNombreLoc: TDBEdit;
    oTel1: TDBEdit;
    oTel2: TDBEdit;
    oFax: TDBEdit;
    Label7: TLabel;
    Label8: TLabel;
    Label9: TLabel;
    Label10: TLabel;
    oDireccion: TDBMemo;
    oEmail: TDBEdit;
    Label12: TLabel;
    oBtnExit: TPngBitBtn;
    oBtnAbort: TPngBitBtn;
    oBtnSave: TPngBitBtn;
    oBtnFind: TPngBitBtn;
    oBtnDelete: TPngBitBtn;
    oBtnEdit: TPngBitBtn;
    oBtnNew: TPngBitBtn;
    oBtnPrint: TPngBitBtn;
    oID: TDBEdit;
    GroupBox1: TGroupBox;
    Label1: TLabel;
    DBEdit1: TDBEdit;
    Label2: TLabel;
    DBEdit2: TDBEdit;
    DBEdit3: TDBEdit;
    Label6: TLabel;
    DBEdit4: TDBEdit;
    Label13: TLabel;
    oWebPage: TDBEdit;
    Label14: TLabel;
    DBMemo1: TDBMemo;
    Label15: TLabel;
    GroupBox2: TGroupBox;
    Label18: TLabel;
    oPorc_Ret: TDBNumberEditEh;
    oDS_Municipios: TDataSource;
    Label19: TLabel;
    Label20: TLabel;
    oDS_Rutas: TDataSource;
    BitBtn1: TBitBtn;
    BitBtn2: TBitBtn;
    oCk_CteUnico: TDBCheckBox;
    oConection: TFDConnection;
    otClientes: TFDTable;
    otMunicipios: TFDTable;
    otRutas: TFDTable;
    DBCheckBox1: TDBCheckBox;
    DBCheckBox2: TDBCheckBox;
    DBCheckBox3: TDBCheckBox;
    oLst_Rutas: TDBLookupComboBox;
    oLst_Minucipio: TDBLookupComboBox;
    Label11: TLabel;
    octe_id_interf: TDBEdit;
    TabSheet3: TTabSheet;
    Label21: TLabel;
    oFecha_Alta: TDBDateTimeEditEh;
    Label32: TLabel;
    DBEdit5: TDBEdit;
    Label22: TLabel;
    oFecha_Mof: TDBDateTimeEditEh;
    Label33: TLabel;
    DBEdit6: TDBEdit;
    oBtn_UpWeb: TPngBitBtn;
    procedure Action_Control(pOption: integer);
    procedure oBtnNewClick(Sender: TObject);
    procedure oBtnEditClick(Sender: TObject);
    procedure oBtnDeleteClick(Sender: TObject);
    procedure oBtnFindClick(Sender: TObject);
    procedure oBtnPrintClick(Sender: TObject);
    procedure oBtnSaveClick(Sender: TObject);
    procedure oBtnAbortClick(Sender: TObject);
    procedure oBtnExitClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure ZTable1AfterPost(DataSet: TDataSet);
    procedure FormShow(Sender: TObject);
    procedure oNombreComKeyPress(Sender: TObject; var Key: Char);
    procedure oNombreLocKeyPress(Sender: TObject; var Key: Char);
    procedure oEmailKeyPress(Sender: TObject; var Key: Char);
    procedure oWebPageKeyPress(Sender: TObject; var Key: Char);
    procedure oTel1KeyPress(Sender: TObject; var Key: Char);
    procedure oTel2KeyPress(Sender: TObject; var Key: Char);
    procedure oFaxKeyPress(Sender: TObject; var Key: Char);
    procedure oIDKeyPress(Sender: TObject; var Key: Char);
    procedure DBEdit1KeyPress(Sender: TObject; var Key: Char);
    procedure DBEdit2KeyPress(Sender: TObject; var Key: Char);
    procedure DBEdit3KeyPress(Sender: TObject; var Key: Char);
    procedure DBEdit4KeyPress(Sender: TObject; var Key: Char);
    procedure oPorc_RetKeyPress(Sender: TObject; var Key: Char);
    procedure Activa_Objetos(bPar: boolean);
    procedure oNombreComExit(Sender: TObject);
    procedure BitBtn1Click(Sender: TObject);
    procedure BitBtn2Click(Sender: TObject);
    procedure otClientesAfterInsert(DataSet: TDataSet);
    procedure otClientesBeforePost(DataSet: TDataSet);
    procedure oLst_RutasKeyPress(Sender: TObject; var Key: Char);
    procedure oLst_MinucipioKeyPress(Sender: TObject; var Key: Char);
    procedure octe_id_interfKeyPress(Sender: TObject; var Key: Char);
    procedure octe_id_interfExit(Sender: TObject);
    procedure oBtn_UpWebClick(Sender: TObject);
    function Make_Json_Clientes(pdsClientes: TDataSet): WideString;
    function Send_Interfuerza(cJson: WideString): String;
  private
    { Private declarations }
    iOption: integer;
  public
    { Public declarations }
  end;

var
  fClientes: TfClientes;

implementation

USES UtilesV20, BuscarGenM2, Municipios, Rutas;
{$R *.dfm}

procedure TfClientes.DBEdit1KeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then { if it's an enter key }
  begin
    Key := #0; { eat enter key }
    Perform(WM_NEXTDLGCTL, 0, 0); { move to next control }
  end
end;

procedure TfClientes.DBEdit2KeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then { if it's an enter key }
  begin
    Key := #0; { eat enter key }
    Perform(WM_NEXTDLGCTL, 0, 0); { move to next control }
  end
end;

procedure TfClientes.DBEdit3KeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then { if it's an enter key }
  begin
    Key := #0; { eat enter key }
    Perform(WM_NEXTDLGCTL, 0, 0); { move to next control }
  end
end;

procedure TfClientes.DBEdit4KeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then { if it's an enter key }
  begin
    Key := #0; { eat enter key }
    Perform(WM_NEXTDLGCTL, 0, 0); { move to next control }
  end
end;

procedure TfClientes.oWebPageKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then { if it's an enter key }
  begin
    Key := #0; { eat enter key }
    Perform(WM_NEXTDLGCTL, 0, 0); { move to next control }
  end
end;

procedure TfClientes.oPorc_RetKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then { if it's an enter key }
  begin
    Key := #0; { eat enter key }
    Perform(WM_NEXTDLGCTL, 0, 0); { move to next control }
  end
end;

procedure TfClientes.FormCreate(Sender: TObject);
begin
  self.iOption := 0;
  // self.ResizeKit1.Enabled := utiles.Ctrl_Resize;
  freeandnil(oConection);
  self.PageControl1.ActivePageIndex := 0;
  self.otClientes.Connection := fUtilesV20.oPublicCnn;
  self.otMunicipios.Connection := fUtilesV20.oPublicCnn;
  self.otRutas.Connection := fUtilesV20.oPublicCnn;
  self.oDS_Municipios.DataSet := otMunicipios;
  self.otMunicipios.Active := true;
  self.oDS_Clientes.DataSet := otClientes;
  self.oDS_Clientes.Enabled := true;
  self.otClientes.Active := true;

  self.oDS_Rutas.DataSet := otRutas;
  self.oDS_Rutas.Enabled := true;
  self.otRutas.Active := true;

  self.otMunicipios.Active := true;
  self.oCk_CteUnico.Caption := 'Cliente Único de: ' + fUtilesV20.query_selectgen_result
    ('SELECT emp_descripcion FROM empresas WHERE emp_id="' + IntToStr(UtilesV20.iId_Empresa) + '"');
  { self.otClientes.Filter := 'cte_emp_id="' + IntToStr(utiles.iId_Empresa) + '" ';
    self.otClientes.Filtered := true;
  }
end;

procedure TfClientes.FormShow(Sender: TObject);
begin
  self.PageControl1.ActivePageIndex := 0;
  self.Action_Control(6);
  self.Activa_Objetos(false);
end;

procedure TfClientes.oBtnAbortClick(Sender: TObject);
begin
  self.otClientes.Cancel;
  self.Action_Control(7);
  self.Activa_Objetos(false);
  self.PageControl1.ActivePageIndex := 0;
  self.iOption := 0;
end;

procedure TfClientes.oBtnDeleteClick(Sender: TObject);
var
  nResp: integer;
begin
  if self.otClientes.isEmpty then
  begin
    self.Action_Control(6);
    exit;
  end;
  self.iOption := 3;
  self.Action_Control(3);
  nResp := MessageDlg('Seguro que desea borrar eliminar el registro alctual?', mtConfirmation, [mbYes, mbNo], 0);
  If (nResp = mrYes) Then
  begin
    self.oDBNav.DataSource.DataSet.Delete;
    self.oDBNav.DataSource.DataSet.Refresh;
  end;
  self.iOption := 0;
end;

procedure TfClientes.oBtnEditClick(Sender: TObject);
begin
  if self.otClientes.isEmpty then
  begin
    self.Action_Control(6);
    exit;
  end;
  self.iOption := 2;
  self.PageControl1.ActivePageIndex := 0;
  self.otClientes.Edit;
  self.Action_Control(2);
  self.Activa_Objetos(true);
  self.oNombreCom.SetFocus;
end;

procedure TfClientes.oBtnExitClick(Sender: TObject);
begin
  self.close;
end;

procedure TfClientes.oBtnFindClick(Sender: TObject);
begin
  self.Action_Control(4);

  Application.CreateForm(TfBuscarGenM2, fBuscarGenM2);
  fBuscarGenM2.Hide;
  fBuscarGenM2.oLst_campos.Clear;

  BuscarGenM2.oListData[1].Texto := 'Código';
  BuscarGenM2.oListData[1].Campo := 'cte_id';
  BuscarGenM2.oListData[1].LLave := true;

  BuscarGenM2.oListData[2].Texto := 'Nombre Comercial';
  BuscarGenM2.oListData[2].Campo := 'cte_nombre_com';
  BuscarGenM2.oListData[2].LLave := false;

  BuscarGenM2.oListData[3].Texto := 'Nombre Fiscal';
  BuscarGenM2.oListData[3].Campo := 'cte_nombre_loc';
  BuscarGenM2.oListData[3].LLave := false;

  fBuscarGenM2.oSql1.Clear;
  fBuscarGenM2.oSql1.Lines.Add
    ('SELECT cte_id,UCASE(cte_nombre_com) as cte_nombre_com,UCASE(cte_nombre_loc) as cte_nombre_loc FROM clientes WHERE 1=1 ');
  fBuscarGenM2.ShowModal;
  if BuscarGenM2.vFindResult <> '' then
    self.oDBNav.DataSource.DataSet.Locate('cte_id', BuscarGenM2.vFindResult, []);
  freeandnil(fBuscarGenM2);
end;

procedure TfClientes.oBtnNewClick(Sender: TObject);
VAR
  cNext: STRING;
begin
  self.iOption := 1;
  self.PageControl1.ActivePageIndex := 0;
  self.otClientes.Insert;
  self.oActivo.Checked := true;
  self.Action_Control(1);
  self.Activa_Objetos(true);
  self.otClientes.FieldByName('cte_inactivo').Value := 0;
  self.otClientes.FieldByName('cte_emp_id').AsInteger := UtilesV20.iId_Empresa;
  cNext := fUtilesV20.query_selectgen_result('SELECT IFNULL(corre_cli,0)+1 AS corre_cli FROM global LIMIT 1');
  self.otClientes.FieldByName('cte_id').AsString := cNext;

  self.oLst_Minucipio.KeyValue := 1;
  self.oLst_Rutas.KeyValue := 1;
  self.oNombreCom.SetFocus;
end;

procedure TfClientes.oBtnPrintClick(Sender: TObject);
begin
  self.Action_Control(5);
  ShowMessage('Opción aún no programada.');
end;

procedure TfClientes.oBtnSaveClick(Sender: TObject);
var
  cNext: string;
begin
  if (self.iOption = 1) then
  begin
    cNext := fUtilesV20.query_selectgen_result('SELECT IFNULL(corre_cli,0)+1 AS corre_cli FROM global LIMIT 1');
    self.otClientes.FieldByName('cte_id').AsString := cNext;
    UtilesV20.Execute_SQL_Command('UPDATE global SET corre_cli=IFNULL(corre_cli,0)+1 WHERE 1=1');
  end;

  self.otClientes.post;
  self.Action_Control(6);
  self.Activa_Objetos(false);
  self.PageControl1.ActivePageIndex := 0;
  self.iOption := 0;
end;

procedure TfClientes.oBtn_UpWebClick(Sender: TObject);
var
  cJsonBody: WideString;
  cJsonResp: WideString;
begin
  self.otClientes.Filtered := false;
  self.otClientes.Filter := '';
  self.otClientes.First;

  self.otClientes.Filter := '(cte_emp_id=0 or cte_emp_id=1) AND (cte_inactivo=0) ';
  self.otClientes.Filtered := true;
  self.otClientes.First;
  while not self.otClientes.Eof do
  begin
    if ((self.otClientes.FieldByName('cte_id_interf').AsString <> '') or (self.otClientes.FieldByName('cte_id_interf').isnull)) then
    begin
      cJsonBody := self.Make_Json_Clientes(self.otClientes);

      cJsonResp := self.Send_Interfuerza(cJsonBody);
      if (self.Parse_JSonValue(cJsonResp) = true) then
      begin

      end;

    end;
    self.otClientes.Next;
  end;
  self.otClientes.Filter := '';
  self.otClientes.Filtered := false;
  self.otClientes.First;
end;

function TfClientes.Send_Interfuerza(cJson: WideString): String;
var
  cJsonResp: WideString;
  cResult: string;
begin
  cResult := '';
  cJsonResp := '';
  if (trim(cJson) <> '') then
  begin
    self.RESTRequest1.Params.Clear;
    self.RESTRequest1.AddParameter('X-IFX-Token', 'f0210ebdb504c31b20272772a11c55bf', TRESTRequestParameterKind.pkHTTPHEADER);
    self.RESTRequest1.Body.Add(trim(cJson), REST.Types.ContentTypeFromString('application/json'));
    self.RESTRequest1.Execute;
    cResult := self.RESTResponse1.StatusText;
    cJsonResp := self.RESTResponse1.Content;
  end;
  result := cJsonResp;
end;

function TfClientes.Make_Json_Clientes(pdsClientes: TDataSet): WideString;
var
  oOMain: TJSonObject;
  oOLines: TJSonObject;
  cResult: WideString;
begin
  oOMain := TJSonObject.Create;
  oOLines := TJSonObject.Create;

  oOLines.AddPair('Tipo', 'CLIENTE');
  oOLines.AddPair('RUC', '');
  oOLines.AddPair('DV', '');
  oOLines.AddPair('Empresa', pdsClientes.FieldByName('cte_nombre_com').AsString);
  oOLines.AddPair('Email', pdsClientes.FieldByName('cte_email').AsString);
  oOLines.AddPair('Status', 'ACTIVE');
  oOLines.AddPair('Telefono_1', pdsClientes.FieldByName('cte_telefono1').AsString);
  oOLines.AddPair('Telefono_2', pdsClientes.FieldByName('cte_telefono2').AsString);
  oOLines.AddPair('Cellular', pdsClientes.FieldByName('cte_contacto_movil').AsString);
  oOLines.AddPair('Direccion', pdsClientes.FieldByName('cte_direccion').AsString);
  oOLines.AddPair('Ciudad', 'PANAMA');
  oOLines.AddPair('Estado', 'PANAMA');
  oOLines.AddPair('Pais', 'PANAMA');
  oOLines.AddPair('Empleados', '1');
  oOLines.AddPair('Industria', '');
  oOLines.AddPair('Credit_Term', 'CREDIT');
  oOLines.AddPair('Due_Days', '0');
  oOLines.AddPair('Credit_Amount_Limit', '0');
  oOLines.AddPair('Vendedor', '');
  oOLines.AddPair('BirthDate', '2000-01-01');
  oOLines.AddPair('Taxable', 'false');
  oOLines.AddPair('Tipo_Contribuyente', '');
  oOLines.AddPair('Clase', 'Juridica');
  oOLines.AddPair('Name_First', '');
  oOLines.AddPair('Name_Second', '');
  oOLines.AddPair('LastName_First', '');
  oOLines.AddPair('LastName_Second', '');

  oOMain.AddPair('class', 'PUT');
  oOMain.AddPair('action', 'customers');
  oOMain.AddPair('data', oOLines);

  cResult := cResult + oOMain.ToString;

  if (oOLines <> nil) then
    oOLines.Free;
  oOMain := nil;
  result := cResult;
end;

procedure TfClientes.octe_id_interfExit(Sender: TObject);
var
  cVar: string;
begin
  if ((self.iOption = 1) or (self.iOption = 2)) then
  begin
    cVar := trim(self.octe_id_interf.Text);
    if (fUtilesV20.IsStrANumber(cVar) = true) then
    begin
      self.octe_id_interf.Text := 'C' + fUtilesV20.PadL(cVar, 4, '0');
    end;
  end;
end;

procedure TfClientes.octe_id_interfKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then { if it's an enter key }
  begin
    Key := #0; { eat enter key }
    Perform(WM_NEXTDLGCTL, 0, 0); { move to next control }
  end
end;

procedure TfClientes.oEmailKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then { if it's an enter key }
  begin
    Key := #0; { eat enter key }
    Perform(WM_NEXTDLGCTL, 0, 0); { move to next control }
  end
end;

procedure TfClientes.oFaxKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then { if it's an enter key }
  begin
    Key := #0; { eat enter key }
    Perform(WM_NEXTDLGCTL, 0, 0); { move to next control }
  end
end;

procedure TfClientes.oIDKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then { if it's an enter key }
  begin
    Key := #0; { eat enter key }
    Perform(WM_NEXTDLGCTL, 0, 0); { move to next control }
  end
end;

procedure TfClientes.oLst_MinucipioKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then { if it's an enter key }
  begin
    Key := #0; { eat enter key }
    Perform(WM_NEXTDLGCTL, 0, 0); { move to next control }
  end
end;

procedure TfClientes.oLst_RutasKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then { if it's an enter key }
  begin
    Key := #0; { eat enter key }
    Perform(WM_NEXTDLGCTL, 0, 0); { move to next control }
  end
end;

procedure TfClientes.oNombreComExit(Sender: TObject);
begin
  if ((fUtilesV20.isEmpty(self.oNombreLoc.Text) = true) or (self.oNombreLoc.Text = null)) then
    self.otClientes.FieldByName('cte_nombre_loc').AsString := self.oNombreCom.Text;
end;

procedure TfClientes.oNombreComKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then { if it's an enter key }
  begin
    Key := #0; { eat enter key }
    Perform(WM_NEXTDLGCTL, 0, 0); { move to next control }
  end
end;

procedure TfClientes.oNombreLocKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then { if it's an enter key }
  begin
    Key := #0; { eat enter key }
    Perform(WM_NEXTDLGCTL, 0, 0); { move to next control }
  end
end;

procedure TfClientes.otClientesAfterInsert(DataSet: TDataSet);
begin
  if (DataSet.State in [dsInsert]) then
  begin
    DataSet.FieldByName('cte_notas').Value := '';
    DataSet.FieldByName('cte_direccion').Value := '';
    DataSet.FieldByName('cte_inactivo').Value := 0;
    DataSet.FieldByName('cte_poc_ret').AsFloat := 50.00;
    DataSet.FieldByName('cte_pag_impm').Value := 0;
    DataSet.FieldByName('cte_pag_spac').Value := 0;
    DataSet.FieldByName('cte_pag_jcj').Value := 0;
    DataSet.FieldByName('cte_unico_emp').Value := 0;
  end;
end;

procedure TfClientes.otClientesBeforePost(DataSet: TDataSet);
begin
  if (DataSet.State in [dsEdit, dsInsert]) then
  begin
    if fUtilesV20.isEmpty(DataSet.FieldByName('cte_nombre_com').AsString) then
    begin
      ShowMessage('Para crear el cliente, es necesario por lo menos el nombre.');
      self.PageControl1.TabIndex := 0;
      self.oNombreCom.SetFocus;
      abort;
    end;

    if fUtilesV20.isEmpty(DataSet.FieldByName('cte_id_interf').AsString) then
    begin
      ShowMessage('En de obligación colocar el código de cliente INTERFUERZA WEB.');
      self.PageControl1.TabIndex := 0;
      self.octe_id_interf.SetFocus;
      abort;
    end;

    if (DataSet.State = dsEdit) then
    begin
      DataSet.FieldByName('cte_fecha_modif').Value := now();
      DataSet.FieldByName('u_usuario_modif').Value := UtilesV20.sUserName;
    end
    else if (DataSet.State = dsInsert) then
    begin
      DataSet.FieldByName('cte_fecha_alta').Value := now();
      DataSet.FieldByName('u_usuario_alta').Value := UtilesV20.sUserName;
      DataSet.FieldByName('cte_fecha_Modif').AsDateTime := now();
      DataSet.FieldByName('u_usuario_modif').Value := UtilesV20.sUserName;
    end;
    if DataSet.FieldByName('cte_unico_emp').Value = 1 then
      DataSet.FieldByName('cte_emp_id').AsInteger := UtilesV20.iId_Empresa
    else
      DataSet.FieldByName('cte_emp_id').AsInteger := 0;
  end;
end;

procedure TfClientes.oTel1KeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then { if it's an enter key }
  begin
    Key := #0; { eat enter key }
    Perform(WM_NEXTDLGCTL, 0, 0); { move to next control }
  end
end;

procedure TfClientes.oTel2KeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then { if it's an enter key }
  begin
    Key := #0; { eat enter key }
    Perform(WM_NEXTDLGCTL, 0, 0); { move to next control }
  end
end;

procedure TfClientes.ZTable1AfterPost(DataSet: TDataSet);
begin
  if fUtilesV20.isEmpty(DataSet.FieldByName('cte_nombre_com').AsString) then
  begin
    ShowMessage('Para crear un cliente es necesario por lo menos el nombre del cliente.');
    abort;
  end;
end;

procedure TfClientes.Action_Control(pOption: integer);
begin
  if ((pOption = 1) or (pOption = 2)) then
  begin
    oDBNav.Visible := false;
    oBtnNew.Visible := false;
    oBtnEdit.Visible := false;
    oBtnDelete.Visible := false;
    oBtnFind.Visible := false;
    oBtnPrint.Visible := false;
    oBtnExit.Enabled := false;

    oBtnSave.Top := oBtnNew.Top;
    oBtnSave.Left := oBtnNew.Left;

    oBtnAbort.Top := oBtnEdit.Top;
    oBtnAbort.Left := oBtnEdit.Left;

    oBtnAbort.Visible := true;
    oBtnSave.Visible := true;
    oBtnExit.Visible := false;

  end;

  if ((pOption = 6) or (pOption = 7)) then
  begin
    oDBNav.Visible := true;
    oBtnNew.Visible := true;
    oBtnEdit.Visible := true;
    oBtnDelete.Visible := true;
    oBtnFind.Visible := true;
    oBtnPrint.Visible := false;
    oBtnExit.Enabled := true;
    oBtnSave.Top := oBtnNew.Top;
    oBtnSave.Left := oBtnNew.Left;

    oBtnAbort.Top := oBtnEdit.Top;
    oBtnAbort.Left := oBtnEdit.Left;

    oBtnAbort.Visible := false;
    oBtnSave.Visible := false;
    oBtnExit.Visible := true;

  end;

end;

procedure TfClientes.Activa_Objetos(bPar: boolean);
var
  i: Word;
  oComponents: TControl;
begin
  for i := 0 to self.ComponentCount - 1 do
  begin
    if (self.Components[i] is TDBEdit) then
    begin
      oComponents := TDBEdit(self.Components[i]);
      oComponents.Enabled := fUtilesV20.iif(oComponents.Tag = 3, false, fUtilesV20.iif(oComponents.Tag = 1, not bPar, bPar));
    end;
    if (self.Components[i] is TDBMemo) then
    begin
      oComponents := TDBMemo(self.Components[i]);
      oComponents.Enabled := fUtilesV20.iif(oComponents.Tag = 3, false, fUtilesV20.iif(oComponents.Tag = 1, not bPar, bPar));
    end;
    if (self.Components[i] is TDBNumberEditEh) then
    begin
      oComponents := TDBNumberEditEh(self.Components[i]);
      oComponents.Enabled := fUtilesV20.iif(oComponents.Tag = 3, false, fUtilesV20.iif(oComponents.Tag = 1, not bPar, bPar));
    end;
    if (self.Components[i] is TDBLookupComboBox) then
    begin
      oComponents := TDBLookupComboBox(self.Components[i]);
      oComponents.Enabled := fUtilesV20.iif(oComponents.Tag = 3, false, fUtilesV20.iif(oComponents.Tag = 1, not bPar, bPar));
    end;
    if (self.Components[i] is TDBCheckBox) then
    begin
      oComponents := TDBCheckBox(self.Components[i]);
      oComponents.Enabled := fUtilesV20.iif(oComponents.Tag = 3, false, fUtilesV20.iif(oComponents.Tag = 1, not bPar, bPar));
    end;
    if (self.Components[i] is TPngSpeedButton) then
    begin
      oComponents := TPngSpeedButton(self.Components[i]);
      oComponents.Enabled := fUtilesV20.iif(oComponents.Tag = 3, false, fUtilesV20.iif(oComponents.Tag = 1, not bPar, bPar));
    end;
    if (self.Components[i] is TDBComboBox) then
    begin
      oComponents := TDBComboBox(self.Components[i]);
      oComponents.Enabled := fUtilesV20.iif(oComponents.Tag = 3, false, fUtilesV20.iif(oComponents.Tag = 1, not bPar, bPar));
    end;
    if (self.Components[i] is TDBComboBoxEh) then
    begin
      oComponents := TDBComboBoxEh(self.Components[i]);
      oComponents.Enabled := fUtilesV20.iif(oComponents.Tag = 3, false, fUtilesV20.iif(oComponents.Tag = 1, not bPar, bPar));
    end;
    if (self.Components[i] is TDBDateTimeEditEh) then
    begin
      oComponents := TDBDateTimeEditEh(self.Components[i]);
      oComponents.Enabled := fUtilesV20.iif(oComponents.Tag = 3, false, fUtilesV20.iif(oComponents.Tag = 1, not bPar, bPar));
    end;
    if (self.Components[i] is TDBLookupComboboxEh) then
    begin
      oComponents := TDBLookupComboboxEh(self.Components[i]);
      oComponents.Enabled := fUtilesV20.iif(oComponents.Tag = 3, false, fUtilesV20.iif(oComponents.Tag = 1, not bPar, bPar));
    end;

    if (self.Components[i] is TBitBtn) then
    begin
      oComponents := TBitBtn(self.Components[i]);
      if oComponents.Tag = 20 then
        oComponents.Enabled := bPar;
    end;
  end;
  self.oID.Enabled := false;
end;

procedure TfClientes.BitBtn1Click(Sender: TObject);
begin
  Application.CreateForm(TfMunicipios, fMunicipios);
  fMunicipios.ShowModal;
  fMunicipios.Free;
  self.otMunicipios.Refresh;
end;

procedure TfClientes.BitBtn2Click(Sender: TObject);
begin
  Application.CreateForm(TfRutas, fRutas);
  fRutas.ShowModal;
  fRutas.Free;
  self.otRutas.Refresh;
end;

end.
